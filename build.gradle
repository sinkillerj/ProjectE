import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven {
            name "forge"
            url "https://maven.minecraftforge.net/"
        }
        maven {
            name 'parchment'
            url 'https://maven.parchmentmc.org'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.1"
    id 'java'
    id 'eclipse'
    id 'idea'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

wrapper {
    //Define wrapper values here so as to not have to always do so when updating gradlew.properties
    gradleVersion = '7.4.2'
    distributionType = Wrapper.DistributionType.ALL
}

defaultTasks 'build'

idea {
    module {
        //Exclude directories from being managed
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            excludeDirs.add(new File(projectDir, excludeDirName))
        }
    }
}

sourceSets {
    api {
        //The API has no resources
        resources.srcDirs = []
    }
    main {
        resources {
            //Add the generated main module resources
            srcDirs += 'src/datagen/generated'
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }
        compileClasspath += api.output
        runtimeClasspath += api.output
    }
    datagen {
        java.srcDirs = ['src/datagen/java']
        //Data gen has no resources it just creates resources
        resources.srcDirs = []
        compileClasspath += api.output + main.output
    }
    test {
        //The test module has no resources
        resources.srcDirs = []
        compileClasspath += api.output + main.output
        runtimeClasspath += api.output + main.output
    }
}

def libraryConfigs = new HashSet<org.gradle.api.artifacts.Configuration>();
configurations { configContainer ->
    sourceSets.each { sourceSet ->
        def configName = sourceSet.name == "main" ? "forgeLibrary" : sourceSet.name + "ForgeLibrary";
        def implementationConfigName = sourceSet.name == "main" ? "implementation" : sourceSet.name + "Implementation"
        def libraryConfig = configContainer.maybeCreate(configName)
        def implementationConfig = configContainer.maybeCreate(implementationConfigName)
        implementationConfig.extendsFrom libraryConfig
        libraryConfigs.add(libraryConfig)
    }
    //Make sure all our sub source set stuff extends the proper base methods so that
    // they can see all the dependencies we have in dependencies including forge
    extendConfigurations(implementation, apiImplementation, testImplementation, datagenImplementation)
    extendConfigurations(compileOnly, apiCompileOnly, testCompileOnly, datagenCompileOnly)
    extendConfigurations(runtimeOnly, apiRuntimeOnly, datagenRuntimeOnly)
}

static void extendConfigurations(Configuration base, Configuration... configurations) {
    for (def configuration : configurations) {
        configuration.extendsFrom(base)
    }
}

ext {
    versionProperties = ["version"       : projecte_version, "mc_version": minecraft_version_range, "forge_version": forge_version_range,
                         "loader_version": loader_version_range, "jei_version": jei_version_range]
    jsonPatterns = ["**/*.json", "**/*.mcmeta"]
}

def replaceResources = tasks.register("replaceResources", Copy) {
    it.outputs.upToDateWhen { false }
    def modsToml = copySpec {
        from(sourceSets.main.resources) {
            include "META-INF/mods.toml"
            expand versionProperties
        }
    }
    //Copy it into the build dir
    it.with modsToml
    it.into "$buildDir/resources/main/"
    //If IntelliJ's output dir exists, copy it there as well
    if (new File("$rootDir/out/production/").exists()) {
        copy {
            with modsToml
            into "$rootDir/out/production/"
        }
    }
    //If Eclipse's output dir exists, copy it there as well
    if (new File("$rootDir/bin/main/").exists()) {
        copy {
            with modsToml
            into "$rootDir/bin/main/"
        }
    }
}

version = "${projecte_version}"
group = "java.moze_intel"
archivesBaseName = "projecte"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    accessTransformers.from(file('src/main/resources/META-INF/accesstransformer.cfg'))

    runs { runSpecContainer ->
        client {
            workingDirectory file('run')
            //We aren't a multi-project config so we can disable the forced exit to allow gradle run tasks to stop gracefully
            forceExit = false
            //This fixes Mixin application problems from other mods because their refMaps are SRG-based, but we're in a MCP env
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            //The below if statements are to add args to your gradle.properties file in user home
            // (DO NOT add them directly to the gradle.properties file for this project)
            // Setting the below properties allows use of your normal Minecraft account in the
            // dev environment including having your skin load. Each property also has a comment
            // explaining what information to set the value to/format it expects
            // One thing to note is because of the caching that goes on, after changing these
            // variables, you need to refresh the project and rerun genIntellijRuns/genEclipseRuns
            if (project.hasProperty('mc_uuid')) {
                //Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                //Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                //Your access token, you can find it in your '.minecraft/launcher_accounts.json' file
                args '--accessToken', project.getProperty('mc_accessToken')
            }
            if (project.hasProperty('forge_force_ansi')) {
                //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            mods {
                projecte.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }
        server {
            workingDirectory file('run')
            //We aren't a multi-project config so we can disable the forced exit to allow gradle run tasks to stop gracefully
            forceExit = false
            //This fixes Mixin application problems from other mods because their refMaps are SRG-based, but we're in a MCP env
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            if (project.hasProperty('forge_force_ansi')) {
                //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            mods {
                projecte.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }
        data {
            workingDirectory file('run')
            environment 'target', 'fmluserdevdata'
            //We aren't a multi-project config so we can disable the forced exit to allow gradle run tasks to stop gracefully
            forceExit = false
            //This fixes Mixin application problems from other mods because their refMaps are SRG-based, but we're in a MCP env
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            if (project.hasProperty('forge_force_ansi')) {
                //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            args '--all', '--output', file('src/datagen/generated/'), '--mod', 'projecte',
                    '--existing', file('src/main/resources/')

            mods {
                projecte.sources((SourceSet[]) [sourceSets.main, sourceSets.api, sourceSets.datagen])
            }
        }
        project.afterEvaluate {
            def paths = new HashSet<String>()
            libraryConfigs.each { config ->
                config.copyRecursive().resolve().collect {
                    it.absolutePath.toString()
                }.each { path ->
                    paths.add(path)
                }
            }
            runSpecContainer.each { runSpec ->
                runSpec.lazyToken('minecraft_classpath') {
                    paths.join(File.pathSeparator)
                }
            }
        }
    }
}

repositories {
    maven {
        name 'JEI'
        // url "https://dvs1.progwml6.com/files/maven" -- Server is down, also use blamejared instead according to mezz
        url "https://maven.blamejared.com"
        content {
            includeGroup 'mezz.jei'
        }
    }
    maven {
        name 'CraftTweaker'
        url "https://maven.blamejared.com"
        content {
            includeGroup 'com.blamejared.crafttweaker'
        }
    }
    maven {
        name 'curios'
        url "https://maven.theillusivec4.top/"
        content {
            includeGroup 'top.theillusivec4.curios'
        }
    }
    maven {
        name 'Modmaven'
        url 'https://modmaven.dev/'
        content {
            includeGroup 'mcjty.theoneprobe'
        }
    }
    maven {
        name 'CurseMaven'
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }

    whenObjectAdded {
        //ForgeGradle adds these in an afterEvaluate, so we need to catch them as they're added and exclude mod artifacts/groups
        if (it instanceof MavenArtifactRepository) {
            def url = it.url.toString()
            if (url == 'https://maven.minecraftforge.net/' || url == 'https://libraries.minecraft.net/' || url == 'https://repo.maven.apache.org/maven2/') {
                try {
                    it.content {
                        excludeGroup 'curse.maven'
                        excludeGroup 'mezz.jei'
                        excludeGroup 'mcjty.theoneprobe'
                        excludeGroup 'com.blamejared.crafttweaker'
                        excludeGroup 'top.theillusivec4.curios'
                    }
                    println("Adding exclusions to ${it.url}")
                } catch (Exception ignored) {
                    //oh well
                }
            }
        }
    }
}

test {
    useJUnitPlatform()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")

    //TODO: Remove having to specify these as non transitive once https://github.com/McJtyMods/TheOneProbe/issues/548 is fixed
    compileOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}:api") {
        transitive = false
    }
    runtimeOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}") {
        transitive = false
    }

    compileOnly fg.deobf("curse.maven:jade-api-324717:${jade_api_id}")
    runtimeOnly fg.deobf("curse.maven:jade-324717:${jade_id}")

    implementation fg.deobf("com.blamejared.crafttweaker:CraftTweaker-forge-${minecraft_version}:${crafttweaker_version}")

    forgeLibrary group: "org.apache.commons", name: "commons-math3", version: "3.6.1"
}

if (project.hasProperty('UPDATE_MAPPINGS')) {
    //If the project has the update mappings property, configure it to be able to target all our extra sourceSets as well
    // so that whenever we need to update mappings it is quick and easy to do so.
    // Note: This needs to be below the dependencies and minecraft blocks so that it can properly read the mappings value
    // and also read and find the minecraft dep
    def extraSourceSets = [sourceSets.api, sourceSets.test, sourceSets.datagen]
    Set<File> allExtraDirs = new HashSet<>()
    for (def sourceSet : extraSourceSets) {
        allExtraDirs.addAll(sourceSet.java.srcDirs)
    }
    extractRangeMap {
        sources.from(allExtraDirs)
    }
    applyRangeMap {
        sources.from(allExtraDirs)
    }
    allExtraDirs.each { extractMappedNew.addTarget it }
}

//Set the various variables/settings for the different process resources tasks
processResources {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    exclude('META-INF/mods.toml')
    configure { finalizedBy(replaceResources) }
    doLast {
        fileTree(dir: getOutputs().getFiles().getAsPath(), includes: jsonPatterns).each {
            File file -> file.setText(JsonOutput.toJson(new JsonSlurper().parse(file)))
        }
    }
}

//Make the various classes tasks depend on the corresponding replaceResources tasks in addition to the default processResources tasks they depend on
classes.configure { dependsOn(replaceResources) }

def getManifestAttributes() {
    return [
            "Specification-Title"     : "ProjectE",
            "Specification-Vendor"    : "ProjectE",
            "Specification-Version"   : "${project.projecte_version}",
            "Implementation-Title"    : "ProjectE",
            "Implementation-Version"  : "${project.projecte_version}",
            "Implementation-Vendor"   : "ProjectE",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Automatic-Module-Name": "projecte"
    ]
}

jar {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    from([sourceSets.api.output, sourceSets.main.output])
    manifest.attributes(getManifestAttributes())
    afterEvaluate { finalizedBy reobfJar }
}

task apiJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set("api")
    from sourceSets.api.output
    manifest.attributes(getManifestAttributes())
    afterEvaluate { finalizedBy reobfApiJar }
}

shadowJar {
    //Note: We use the include duplicate strategy instead of FAIL as minimize causes
    // the things to get "added" twice but it is filtered separately by the shadow
    // plugin anyways
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    archiveClassifier.set("universal") // Replace the default JAR
    dependsOn(classes, apiClasses)
    from([sourceSets.api.output, sourceSets.main.output])

    // Only shadow apache commons-math3
    dependencies {
        include dependency('org.apache.commons:commons-math3:.*')
    }
    exclude('assets/org/**')
    exclude('META-INF/maven/**')
    exclude('META-INF/*.txt')
    // Relocate apache commons-math3 to prevent conflicts with other mods that include it
    relocate 'org.apache.commons.math3', 'moze_intel.projecte.shaded.org.apache.commons.math3'
    // Minimize the required files so we only include what is needed
    minimize {
        include dependency('org.apache.commons:commons-math3:.*')
    }
    afterEvaluate { finalizedBy reobfShadowJar }
}

reobf {
    shadowJar {}
    apiJar { classpath.from(sourceSets.api.compileClasspath) }
    jar { classpath.from(sourceSets.main.compileClasspath) }
}

task updateJSON {
    doLast {
        def updateJsonFile = file('update.json')
        def updateJson = new JsonSlurper().parse(updateJsonFile) as Map

        updateJson."${minecraft_version}"."${project.version}" = "See https://www.curseforge.com/minecraft/mc-mods/projecte/files for detailed information."

        // Update promos
        updateJson.promos."${minecraft_version}-latest" = "${project.version}"
        updateJson.promos."${minecraft_version}-recommended" = "${project.version}"

        updateJsonFile.write(JsonOutput.prettyPrint(JsonOutput.toJson(updateJson)))
    }
}

tasks.withType(JavaCompile).configureEach({
    it.options.encoding = 'UTF-8'
    it.options.compilerArgs << "-Xmaxerrs" << "100000"
})

artifacts {
    archives apiJar
}